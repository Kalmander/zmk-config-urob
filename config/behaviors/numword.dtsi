/ {
	behaviors {

		numword_autolayer: numword_autolayer {
			compatible = "zmk,behavior-auto-layer";
			#binding-cells = <1>;
			continue-list = <BACKSPACE DELETE DOT COMMA PLUS MINUS STAR FSLH EQUAL CLEAR_AGAIN G>;
			ignore-numbers;
      ignore-modifiers;
		};

		numwordplus_autolayer: numwordplus_autolayer {
			compatible = "zmk,behavior-auto-layer";
			#binding-cells = <1>;
			continue-list = <SPACE UNDER LEFT RIGHT UP DOWN BACKSPACE DELETE DOT COMMA PLUS MINUS STAR FSLH EQUAL CLEAR_AGAIN G>;
			ignore-numbers;
      ignore-modifiers;
		};

		/* numword_with_overlay: numword_with_overlay { */
		/* 	compatible = "zmk,behavior-macro"; */
		/* 	#binding-cells = <0>; */
		/* 	bindings = < */
		/* 	&numword_autolayer NUM_WORD */
		/* 	&numword_autolayer KCAN_OVER */
		/* 	>; */
		/* }; */
		
		/* #define numword numword_autolayer NUM_WORD */
		#define numword to NUM_WORD_PLUS
    #define nsk to_then_sk NUM_WORD_MODDED
		#define numword_plus numwordplus_autolayer NUM_WORD_PLUS
		

		fsl_num: force_sl_num {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp K_CANCEL>, <&sl NUM_WORD>;
		};

		fnumword: force_numword {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp K_CANCEL>, <&numword>;
		};

		fnumwordparam: force_numword_param {
			compatible = "zmk,behavior-macro-one-param";
			#binding-cells = <1>;
			bindings = <&kp K_CANCEL>, <&macro_param_1to1>, <&numword_autolayer MACRO_PLACEHOLDER>;
		};

		/* fnumwordp: force_numword_plus { */
		/* 	compatible = "zmk,behavior-macro"; */
		/* 	#binding-cells = <0>; */
		/* 	bindings = <&kp K_CANCEL>, <&numword_plus>; */
		/* }; */

		/* numword_or_c: numword_or_c { */
		/* 	compatible = "zmk,behavior-mod-morph"; */
		/* 	#binding-cells = <0>; */
		/* 	bindings = <&fnumwordp>, <&kp LS(C)>; */
		/* 	mods = <(MOD_LSFT|MOD_RSFT)>; */
		/* }; */

		spacebase: spacebase {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <0>;
			tap-ms = <0>;
			bindings = <&kp SPACE>, <&to BASE>;
		};

		enterbase: enterbase {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <0>;
			tap-ms = <0>;
			bindings = <&kp ENTER>, <&to BASE>;
		};

		leftbase: leftbase {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <0>;
			tap-ms = <0>;
			bindings = <&kp LEFT>, <&to BASE>;
		};

		rightbase: rightbase {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <0>;
			tap-ms = <0>;
			bindings = <&kp RIGHT>, <&to BASE>;
		};

		downbase: downbase {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <0>;
			tap-ms = <0>;
			bindings = <&kp DOWN>, <&to BASE>;
		};

		upbase: upbase {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <0>;
			tap-ms = <0>;
			bindings = <&kp UP>, <&to BASE>;
		};

		bnexus_hold: bnexus_hold {
		  compatible = "zmk,behavior-hold-tap";
		  #binding-cells = <2>;
		  flavor = "balanced";
		  tapping-term-ms = <200>;
		  bindings = <&bmo>, <&bsk_nexus_sk>;
		};

		bsym_hold: bsym_hold {
		  compatible = "zmk,behavior-hold-tap";
		  #binding-cells = <2>;
		  flavor = "balanced";
		  tapping-term-ms = <200>;
		  bindings = <&bmo>, <&bsk_symbol_sk>;
		};

		bsk_nexus_sk: bsk_nexus_sk {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <0>;
			tap-ms = <0>;
			bindings = <&to BASE>, <&sl NEXUS>;
		};

		bsk_symbol_sk: bsk_symbol_sk {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <0>;
			tap-ms = <0>;
			bindings = <&to BASE>, <&sl SYMBOL>;
		};


		#define bnexus bnexus_hold NEXUS 0
		#define bsymbol bsym_hold SYMBOL 0

	};
};
